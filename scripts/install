#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	### Remove this function if there's nothing to clean before calling the remove script.
	true
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

mosquittonumber=$YNH_APP_ARG_MOSQUITTONUMBER
ringdisarm=$YNH_APP_ARG_RINGDISARM
app=$YNH_APP_INSTANCE_NAME

final_path=/opt/yunohost/$app

if [ $mosquittonumber -eq "1" ]
then
	mosquitto_instance="mosquitto"
else
	mosquitto_instance="mosquitto__$mosquittonumber"
fi

mosquitto_config_path="/etc/$mosquitto_instance"
# Check Synapse is installed or die early
if [ ! -d $mosquitto_config_path ]
then
	ynh_die --message="Could not find $synapse_config_path config directory. Ensure that you installed Mosquitto first and that you entered a correct \"mosquitto instance number\""
fi

mqtt_user=$(ynh_app_setting_get --app $mosquitto_instance --key username)
mqtt_pass=$(ynh_app_setting_get --app $mosquitto_instance --key password)
mqtt_port=$(ynh_app_setting_get --app $mosquitto_instance --key port)
log_path="/var/log/$app"


#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================
### About --weight and --time
### ynh_script_progression will show to your final users the progression of each scripts.
### In order to do that, --weight will represent the relative time of execution compared to the other steps in the script.
### --time is a packager option, it will show you the execution time since the previous call.
### This option is implied when running in CI_package_check, you can manually add it if you are manually testing the app.
### Use the execution time displayed in the CI report or by adding --time to the command, to estimate the weight of a step.
### A common way to do it is to set a weight equal to the execution time in second +1.
### The execution time is given for the duration since the previous call. So the weight should be applied to this previous call.
ynh_script_progression --message="Validating installation parameters..." --weight=1

### If the app uses NGINX as web server (written in HTML/PHP in most cases), the final path should be "/var/www/$app".
### If the app provides an internal web server (or uses another application server such as uWSGI), the final path should be "/opt/yunohost/$app"
test ! -e "$final_path" || ynh_die --message="This path already contains a folder"

# Register (book) web path

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_script_progression --message="Storing installation settings..." --weight=1

ynh_app_setting_set --app=$app --key=final_path --value=$final_path
ynh_app_setting_set --app=$app --key=mqtt_user --value=$mqtt_user
ynh_app_setting_set --app=$app --key=mqtt_pass --value=$mqtt_pass
ynh_app_setting_set --app=$app --key=mqtt_port --value=$mqtt_port
ynh_app_setting_set --app=$app --key=ring_disarm --value=$ringdisarm
ynh_app_setting_set --app=$app --key=mosquitto_instance --value=$mosquitto_instance

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================
ynh_script_progression --message="Finding an available port..." --weight=1

### Use these lines if you have to open a port for the application
### `ynh_find_port` will find the first available port starting from the given port.
### If you're not using these lines:
###		- Remove the section "CLOSE A PORT" in the remove script

# Find an available port
port=$(ynh_find_port --port=55123)
ynh_app_setting_set --app=$app --key=port --value=$port

# Optional: Expose this port publicly
# (N.B.: you only need to do this if the app actually needs to expose the port publicly.
# If you do this and the app doesn't actually need you are CREATING SECURITY HOLES IN THE SERVER !)

# Open the port
# ynh_script_progression --message="Configuring firewall..." --weight=1
# ynh_exec_warn_less yunohost firewall allow --no-upnp TCP $port

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_script_progression --message="Installing dependencies..." --weight=1

### `ynh_install_app_dependencies` allows you to add any "apt" dependencies to the package.
### Those deb packages will be installed as dependencies of this package.
### If you're not using this helper:
###		- Remove the section "REMOVE DEPENDENCIES" in the remove script
###		- Remove the variable "pkg_dependencies" in _common.sh
###		- As well as the section "REINSTALL DEPENDENCIES" in the restore script
###		- And the section "UPGRADE DEPENDENCIES" in the upgrade script

ynh_install_nodejs --nodejs_version=$NODEJS_VERSION
ynh_install_app_dependencies $pkg_dependencies


#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Configuring system user..." --weight=1

# Create a system user
ynh_system_user_create --username=$app --home_dir="$final_path"

# #=================================================
# # CREATE A MYSQL DATABASE
# #=================================================
# ynh_script_progression --message="Creating a MySQL database..." --weight=1

# ### Use these lines if you need a database for the application.
# ### `ynh_mysql_setup_db` will create a database, an associated user and a ramdom password.
# ### The password will be stored as 'mysqlpwd' into the app settings,
# ### and will be available as $db_pwd
# ### If you're not using these lines:
# ###		- Remove the section "BACKUP THE MYSQL DATABASE" in the backup script
# ###		- Remove also the section "REMOVE THE MYSQL DATABASE" in the remove script
# ###		- As well as the section "RESTORE THE MYSQL DATABASE" in the restore script

# db_name=$(ynh_sanitize_dbid --db_name=$app)
# db_user=$db_name
# ynh_app_setting_set --app=$app --key=db_name --value=$db_name
# ynh_mysql_setup_db --db_user=$db_user --db_name=$db_name

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Setting up source files..." --weight=1

### `ynh_setup_source` is used to install an app from a zip or tar.gz file,
### downloaded from an upstream source, like a git repository.
### `ynh_setup_source` use the file conf/app.src

ynh_app_setting_set --app=$app --key=final_path --value=$final_path
# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source --dest_dir="$final_path"

# FIXME: this should be managed by the core in the future
# Here, as a packager, you may have to tweak the ownerhsip/permissions
# such that the appropriate users (e.g. maybe www-data) can access
# files in some cases.
# But FOR THE LOVE OF GOD, do not allow r/x for "others" on the entire folder -
# this will be treated as a security issue.
chmod 750 "$final_path"
chmod -R o-rwx "$final_path"
chown -R $app:$app "$final_path"

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
# ynh_script_progression --message="Configuring PHP-FPM..." --weight=1

# ### `ynh_add_fpm_config` is used to set up a PHP config.
# ### You can remove it if your app doesn't use PHP.
# ### `ynh_add_fpm_config` will use the files conf/php-fpm.conf
# ### If you're not using these lines:
# ###		- You can remove these files in conf/.
# ###		- Remove the section "BACKUP THE PHP-FPM CONFIGURATION" in the backup script
# ###		- Remove also the section "REMOVE PHP-FPM CONFIGURATION" in the remove script
# ###		- As well as the section "RESTORE THE PHP-FPM CONFIGURATION" in the restore script
# ###		  with the reload at the end of the script.
# ###		- And the section "PHP-FPM CONFIGURATION" in the upgrade script

# # Create a dedicated PHP-FPM config
# ynh_add_fpm_config

#=================================================
# NGINX CONFIGURATION
#=================================================
# ynh_script_progression --message="Configuring NGINX web server..." --weight=1

# ### `ynh_add_nginx_config` will use the file conf/nginx.conf

# # Create a dedicated NGINX config
# ynh_add_nginx_config

#=================================================
# SPECIFIC SETUP
#=================================================
#=================================================
# INSTALL NODE DEPENDENCIES
#=================================================
ynh_script_progression --message="Building Node dependencies..." --weight=30

pushd "$final_path"
	ynh_use_nodejs
	ynh_exec_warn_less sudo -u $app env $ynh_node_load_PATH npm install
popd

#=================================================

# INSTALL RTSP-SIMPLE-SERVER
# TODO: https://github.com/aler9/rtsp-simple-server
ynh_script_progression --message="Installing rtsp-simple-server" --weight=5

arch=$(arch)
case $arch in

  x86_64)
    wget "https://github.com/aler9/rtsp-simple-server/releases/download/v0.20.2/rtsp-simple-server_v0.20.2_linux_amd64.tar.gz"
    ;;

  aarch64)
    wget "https://github.com/aler9/rtsp-simple-server/releases/download/v0.20.2/rtsp-simple-server_v0.20.2_linux_arm64v8.tar.gz"
    ;;

  armv7l)
    wget "https://github.com/aler9/rtsp-simple-server/releases/download/v0.20.2/rtsp-simple-server_v0.20.2_linux_armv7.tar.gz"
    ;;

  armv6l)
    wget "https://github.com/aler9/rtsp-simple-server/releases/download/v0.20.2/rtsp-simple-server_v0.20.2_linux_armv6.tar.gz"
    ;;

  *)
    echo "Architecture unsupported by RTSP-SIMPLE-SERVER"
    exit 1
    ;;
esac

tar -xvf rtsp-simple-server*.tar.gz
chmod +x rtsp-simple-server
mv rtsp-simple-server /usr/local/bin
rm LICENSE rtsp-simple-server.yml rtsp-simple-server*.tar.gz

#=================================================
# ADD A CONFIGURATION
#=================================================
ynh_script_progression --message="Adding a configuration file..." --weight=1

### You can add specific configuration files.
###
### Typically, put your template conf file in ../conf/your_config_file
### The template may contain strings such as __FOO__ or __FOO_BAR__,
### which will automatically be replaced by the values of $foo and $foo_bar
###
### ynh_add_config will also keep track of the config file's checksum,
### which later during upgrade may allow to automatically backup the config file
### if it's found that the file was manually modified
###
### Check the documentation of `ynh_add_config` for more info.

ynh_add_config --template="configurator.js" --destination="$final_path/configurator.js"

pushd "$final_path"
	ynh_use_nodejs
	ynh_exec_warn_less sudo -u $app env $ynh_node_load_PATH node configurator.js $mqtt_user $mqtt_pass $mqtt_port $ringdisarm > $final_path/config.json
popd

# FIXME: this should be handled by the core in the future
# You may need to use chmod 600 instead of 400,
# for example if the app is expected to be able to modify its own config
touch "$final_path/ring-state.json"
chmod 644 "$final_path/ring-state.json"
chown $app:$app "$final_path/ring-state.json"


chmod 644 "$final_path/config.json"
chown $app:$app "$final_path/config.json"

### For more complex cases where you want to replace stuff using regexes,
### you shoud rely on ynh_replace_string (which is basically a wrapper for sed)
### When doing so, you also need to manually call ynh_store_file_checksum
###
### ynh_replace_string --match_string="match_string" --replace_string="replace_string" --target_file="$final_path/some_config_file"
### ynh_store_file_checksum --file="$final_path/some_config_file"

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Configuring a systemd service..." --weight=1

### `ynh_systemd_config` is used to configure a systemd script for an app.
### It can be used for apps that use sysvinit (with adaptation) or systemd.
### Have a look at the app to be sure this app needs a systemd script.
### `ynh_systemd_config` will use the file conf/systemd.service
### If you're not using these lines:
###		- You can remove those files in conf/.
###		- Remove the section "BACKUP SYSTEMD" in the backup script
###		- Remove also the section "STOP AND REMOVE SERVICE" in the remove script
###		- As well as the section "RESTORE SYSTEMD" in the restore script
###		- And the section "SETUP SYSTEMD" in the upgrade script

# Create startup script
ynh_add_config --template="run.sh" --destination="$final_path/run.sh"

chmod 750 "$final_path/run.sh"
chown "$app:$app" "$final_path/run.sh"

# Create a dedicated systemd config
ynh_add_systemd_config


#=================================================
# CREATE LOG DIR
#=================================================

mkdir -p -m 700 "$log_path"
chown $app:$app "$log_path"


#=================================================
# GENERIC FINALIZATION
#=================================================

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..." --weight=1

### `yunohost service add` integrates a service in YunoHost. It then gets
### displayed in the admin interface and through the others `yunohost service` commands.
### (N.B.: this line only makes sense if the app adds a service to the system!)
### If you're not using these lines:
###		- You can remove these files in conf/.
###		- Remove the section "REMOVE SERVICE INTEGRATION IN YUNOHOST" in the remove script
###		- As well as the section "INTEGRATE SERVICE IN YUNOHOST" in the restore script
###		- And the section "INTEGRATE SERVICE IN YUNOHOST" in the upgrade script

yunohost service add $app --description="A short description of the app" --log="/var/log/$app/$app.log"

### Additional options starting with 3.8:
###
### --needs_exposed_ports "$port" a list of ports that needs to be publicly exposed
###                               which will then be checked by YunoHost's diagnosis system
###                               (N.B. DO NOT USE THIS is the port is only internal!!!)
###
### --test_status "some command"  a custom command to check the status of the service
###                               (only relevant if 'systemctl status' doesn't do a good job)
###
### --test_conf "some command"    some command similar to "nginx -t" that validates the conf of the service
###
### Re-calling 'yunohost service add' during the upgrade script is the right way
### to proceed if you later realize that you need to enable some flags that
### weren't enabled on old installs (be careful it'll override the existing
### service though so you should re-provide all relevant flags when doing so)

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=1

### `ynh_systemd_action` is used to start a systemd service for an app.
### Only needed if you have configure a systemd service
### If you're not using these lines:
###		- Remove the section "STOP SYSTEMD SERVICE" and "START SYSTEMD SERVICE" in the backup script
###		- As well as the section "START SYSTEMD SERVICE" in the restore script
###		- As well as the section"STOP SYSTEMD SERVICE" and "START SYSTEMD SERVICE" in the upgrade script
###		- And the section "STOP SYSTEMD SERVICE" and "START SYSTEMD SERVICE" in the change_url script

# Start a systemd service
ynh_systemd_action --service_name=$app --action="start" 


#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed" --last
